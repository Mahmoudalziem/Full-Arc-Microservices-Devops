apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: postgresql
  name: postgresql
  namespace: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
      role: primary
  serviceName: sonarqube-postgresql-headless
  template:
    metadata:
      labels:
        app: postgresql
      name: sonarqube-postgresql
    spec:
      containers:
        - image: docker.io/bitnami/postgresql:11.14.0-debian-10-r22
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: sonarqube-postgresql
          ports:
            - containerPort: 5432
              name: tcp-postgresql
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          envForm:
            configMapRef:
              name: sonar-config
          env:
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: sonar-secret
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: sonar-secret
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
            - mountPath: /bitnami/postgresql
              name: data
      restartPolicy: Always
      volumes:
        - emptyDir:
            medium: Memory
          name: dshm
        - emptyDir: {}
          name: data
  updateStrategy:
    type: RollingUpdate
